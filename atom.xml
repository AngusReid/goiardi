<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Goiardi]]></title>
  <link href="http://ctdk.github.io/goiardi/atom.xml" rel="self"/>
  <link href="http://ctdk.github.io/goiardi/"/>
  <updated>2014-09-05T23:16:26-07:00</updated>
  <id>http://ctdk.github.io/goiardi/</id>
  <author>
    <name><![CDATA[Jeremy Bingham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Another Shovey Preview: The Shovey-Jobs Cookbook]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/09/05/another-shovey-preview-the-shovey-jobs-cookbook/"/>
    <updated>2014-09-05T19:58:15-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/09/05/another-shovey-preview-the-shovey-jobs-cookbook</id>
    <content type="html"><![CDATA[<p>Shovey still isn&rsquo;t finished, but it&rsquo;s come a long ways. To make it easier to play with and find potential issues, I&rsquo;ve released a <a href="https://github.com/ctdk/shovey-jobs">shovey-jobs cookbook</a> to install and configure shovey on a node.</p>

<p>It&rsquo;s a preliminary cookbook, but since shovey&rsquo;s pretty preliminary still I&rsquo;m OK with that. To use the shovey-jobs cookbook, you&rsquo;ll need to set goiardi and the knife-shove plugin up as explained in <a href="http://ctdk.github.io/goiardi/blog/2014/08/24/a-preview-of-shovey/">this previous post on shovey</a> first. Goiardi still only works with shovey in in-memory mode; the SQL support for shovey hasn&rsquo;t been finished yet. After goiardi and serf on the goiardi server are set up, spin up a node and run the shovey-jobs cookbook on it, following the instructions in the <a href="https://github.com/ctdk/shovey-jobs/blob/master/README.md">shovey-jobs README</a>. This cookbook has only been tested on Debian, but it may work with Ubuntu as well. At the moment it&rsquo;s unlikely to work with RHEL and its derivatives or other operating systems, mostly because the init script is Debian specific.</p>

<p>This cookbook depends on having the serf and golang cookbooks uploaded and in the node&rsquo;s run list. Serf may need some extra configuration to work correctly; I had to add this to the test node&rsquo;s attributes for it to work right.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"serf" =&gt; {
</span><span class='line'>    "agent" =&gt; { 
</span><span class='line'>      "node_name" =&gt; "goiardi-test.local",
</span><span class='line'>      "start_join" =&gt; [ "10.250.55.108" ],
</span><span class='line'>      "advertise" =&gt; "10.34.10.15"
</span><span class='line'>    }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>The main serf points are that the serf node&rsquo;s name needs to be the same as the chef client name on the node, it needs to join the same serf cluster as goiardi&rsquo;s serf agent is running on, and it needs to advertise the correct address. The last one came up in testing for me because goiardi was running on my dev box, while the shovey node&rsquo;s serf was advertising the internal vagrant address rather than the shared network address. That should be enough to get you going running commands with shovey. See the <a href="https://github.com/ctdk/knife-shove/blob/master/README.rdoc">knife-shove docs</a> for possible commands there.</p>

<p>On another note, there&rsquo;s some documentation now for the <a href="https://github.com/ctdk/goiardi/blob/serfing/shovey_api.md">shovey API</a>. The new thing there is how the shovey client now streams job output back to the server, and the server can in turn stream it to a client. Unfortunately the knife-shove plugin does not yet allow you to watch the job output stream by, but it&rsquo;s on the list of things to do before the formal release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Preview of Shovey]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/08/24/a-preview-of-shovey/"/>
    <updated>2014-08-24T22:07:42-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/08/24/a-preview-of-shovey</id>
    <content type="html"><![CDATA[<p>The long promised &ldquo;shovey&rdquo; jobs for goiardi, a serf-based way to push commands out to nodes, is finally ready for a preview. There&rsquo;s still some loose ends to pull together, like saving job status on the client so if it&rsquo;s interrupted it can report that fact back to the server and making the goiardi end work with MySQL and Postgres, but it&rsquo;s ready to play with.</p>

<p>To try playing with it, you&rsquo;ll need <a href="https://github.com/ctdk/schob">schob</a>, the shovey client, and <a href="https://github.com/ctdk/knife-shove">knife-shove</a>, the knife plugin to manage shovey jobs.</p>

<p>As explained in the schob README:</p>

<blockquote><ol>
<li>Checkout the &ldquo;serfing&rdquo; branch from goiardi</li>
<li>Create an RSA keypair for signing shovey requests</li>
<li>Install serf and run it as &ldquo;serf agent&rdquo;</li>
<li>Run goiardi in in-memory mode (at this writing, MySQL and Postgres in goiardi don&rsquo;t support shovey yet) with these extra options: <code>--use-serf --use-shovey --sign-priv-key=/path/to/private.key --sign-pub-key=/path/to/public.key</code></li>
<li>Install knife-shove from <a href="https://github.com/ctdk/knife-shove">https://github.com/ctdk/knife-shove</a></li>
<li>Set up the node in goiardi you want to test shovey on. I&rsquo;ve been using the computer I do my usual goiardi dev work for most of it.</li>
<li>Install schob the usual go way</li>
<li>Note where the testing whitelist file is (probably somewhere like ~/go/src/github.com/ctdk/schob/test/whitelist.json).</li>
<li>Run schob like so: <code>schob -VVVV -e http://chef-server.local:4545 -n node-name.local -k /path/to/node.key -w /path/to/schob/test/whitelist.json -p /path/to/public.key --serf-addr=127.0.0.1:7373</code></li>
</ol>


<p>Run schob with <code>-h</code> to see all current options.</p></blockquote>

<p>Cookbooks for setting this all up and better documentation are coming, including documenting the HTTP and serf APIs for communicating with the server and client. The HTTP API is broadly similar to the Chef Pushy API, but not identical. Everything about shovey is still subject to change until it&rsquo;s officially released, but it&rsquo;s ready to play with now. Suggestions and comments are, of course, welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.7.2 - the Yak of Seville]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/08/09/goiardi-version-0-dot-7-2-the-yak-of-seville/"/>
    <updated>2014-08-09T16:01:06-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/08/09/goiardi-version-0-dot-7-2-the-yak-of-seville</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ctdk/goiardi/releases/tag/v0.7.2">Goiardi version 0.7.2</a> is a minor yak shaving release that there isn&rsquo;t a lot to say about. The CHANGELOG pretty much sums it up:</p>

<ul>
<li>Remove a newline in a debug statement, courtesy of <a href="https://github.com/spheromak">@spheromak</a>.</li>
<li>Also per <a href="https://github.com/spheromak">@spheromak</a>&rsquo;s suggestion, fixed some possible race conditions revealed by building goiardi with the <code>-race</code> flag and running chef-pedant against it.</li>
<li>Edit doc.go slightly to make godocs more attractive.</li>
</ul>


<p>Elsewhere, shovey work continues and comes closer to completion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.7.1 - Constant Manatee Attacks]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/07/29/goiardi-version-0-dot-7-1-constant-manatee-attacks/"/>
    <updated>2014-07-29T22:32:13-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/07/29/goiardi-version-0-dot-7-1-constant-manatee-attacks</id>
    <content type="html"><![CDATA[<p>The media refuses to report on this scourge afflicting the Florida coast, which is why you never hear about it.</p>

<p>&ldquo;Shovey&rdquo; is chugging along on a fast pace, but in the meantime a couple of issues came up that I thought deserved attention. Goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.7.1">version 0.7.1</a> is a minor release, addressing two relatively small issues.</p>

<p>First, this release adds options for configuring the db pool size and max number of connections. It was happening automagically before, but I was always a bit uneasy about that. Until last night, though, I kept missing how to set that in the documentation for <code>database/sql</code>.</p>

<p>Second, for cookbook files stored locally (which is currently all of them), goiardi will now set the URL of the resource to use the current configured hostname. This was brought to my attention because someone had uploaded a bunch of cookbooks, changed the hostname and port and turned on SSL, and had the URLs break. It takes a specific chain of events to see the problem, which is why it had gone unnoticed up to this point.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>Add &mdash;db-pool-size and &mdash;max-connections options for configuring the number
of idle db connections kept around and the maximum number of db connections
to make to the server. It isn&rsquo;t particularly useful if you&rsquo;re not using one
of the SQL backends.</li>
<li>For locally stored cookbook files (which is currently all of them), goiardi
now generates the URL to the resource from the currently configured
hostname. This fixes an issue where if you uploaded a cookbook and then
changed the goairdi server&rsquo;s hostname, the URLs to download cookbooks would
break.</li>
</ul>


<p>Other than that, there&rsquo;s nothing else new in this release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.7.0 - Orphans of the Sky]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/07/21/goiardi-version-0-dot-7-0-orphans-of-the-sky/"/>
    <updated>2014-07-21T22:40:32-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/07/21/goiardi-version-0-dot-7-0-orphans-of-the-sky</id>
    <content type="html"><![CDATA[<p>In case you haven&rsquo;t read it, <em><a href="http://en.wikipedia.org/wiki/Orphans_of_the_Sky">Orphans of the Sky</a></em> is a novel by Robert A. Heinlein about a generation ship floating through space where the people on board have forgotten that they are on a space ship. It&rsquo;s pretty good, but more importantly the name of the first of the two novellas that make up the novel is titled &ldquo;Universe&rdquo;. The title of the second part, &ldquo;Common Sense&rdquo;, became relevant after I really dug into making this release for reasons that will soon become clear.</p>

<p>While it ended up being a bigger deal than I expected it to be, I am pleased to announce the release of goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.7.0">version 0.7.0</a>.</p>

<p>I took what I thought would be a brief detour from my current work on the serf integration and &ldquo;shovey&rdquo; stuff for goiardi to implement <a href="https://github.com/opscode/chef-rfc/blob/master/rfc014-universe-endpoint.md">Chef RFC 014</a> real quick like, which I had been considering doing even before the RFC came along. I had been planning on making this a small release numbered 0.6.1, but then after I proposed a mechanism for caching the universe endpoint it was suggested in the RFC discussion that I see how goiardi performed with the full load of cookbooks in the supermarket before jumping the gun and adding caching before it was necessarily needed.</p>

<p>It turned out that will over 6,000 cookbooks the universe endpoint ran like a dog. Ultimately the problem boiled down to using gob to encode the complex data structures in cookbooks, nodes, etc. in the database. Generally gob encoding in golang is faster than using JSON, but in this particular case JSON is actually faster. The &ldquo;common sense&rdquo; thing to do was to change how those complex structures are stored in the database, even though it&rsquo;s a bit of a brutal change. Sometimes, though, you have to bite the bullet and do the thing that sucks. It&rsquo;s ended up working nicely, however; the postgres implementation is now able to make use of the json type and the json functions built into Postgres. Before switching from gob to json, serving <code>/universe</code> with over 6200 cookbooks took over 3 seconds with Postgres or MySQL, but afterwards Postgres can serve it in roughly 325 milliseconds. MySQL isn&rsquo;t able to take advantage of the Postgres-specific json functionality, but it still went down to 1 second, so that&rsquo;s a marked improvement. Using the in-memory (with or without file backing) takes about 1.2 seconds. I&rsquo;m willing to take this; if you have that many cookbooks and can&rsquo;t wait a second for <code>/universe</code>, you may want to use Postgres for your data store.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>Add /universe API endpoint, per
<a href="https://github.com/opscode/chef-rfc/blob/master/rfc014-universe-endpoint.md.">https://github.com/opscode/chef-rfc/blob/master/rfc014-universe-endpoint.md.</a></li>
<li>Make file uploading a little more forgiving.</li>
<li>Make validating some cookbook metadata more forgiving, to bring goiardi&rsquo;s
validations in line with erchef.</li>
<li>Added some functions to make listing all cookbooks and recipes on the
server faster and move the logic into the cookbook package.</li>
<li><p>Breaking DB change: with both MySQL and Postgres, the way data structures
for cookbooks, nodes, etc. has changed from gob encoding to using JSON. This
obviously breaks existing items in the database, so the following steps must
be followed by users using either SQL backend for data storage:</p>

<ul>
<li>Export their goiardi server&rsquo;s data with the <code>-x</code> flag.</li>
<li>Either revert all changes to the db with sqitch, then redeploy, or drop
the database manually and recreate it from either the sqitch patches or
the full table dump of the release (provided starting with 0.7.0)</li>
<li>Reload the goiardi data with the <code>-m</code> flag.
See the README or the godocs for more information.</li>
</ul>
</li>
</ul>


<p>More documentation on the universe endpoint in goiardi is <a href="https://github.com/ctdk/goiardi#berks-universe-endpoint">available in the README</a>. Specific information on upgrading is also in the README in the <a href="https://github.com/ctdk/goiardi#upgrading">UPGRADING</a> section.</p>

<p>Back to the serf/shovey stuff, then.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.6.0 - Order of the Elephant]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/07/01/goiardi-version-0-dot-6-0-order-of-the-elephant/"/>
    <updated>2014-07-01T21:36:11-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/07/01/goiardi-version-0-dot-6-0-order-of-the-elephant</id>
    <content type="html"><![CDATA[<div style="margin-left: auto; margin-right: auto; width: 40%;"><img src="http://ctdk.github.io/goiardi/images/Order_of_the_Elephant_12.jpg" /></div>


<p>The <a href="http://en.wikipedia.org/wiki/Order_of_the_Elephant">Order of the Elephant</a> is a Danish order awarded mostly to foreign heads of state and royals. Its elephant-themed insignia is appropriate for this latest release of goiardi, <a href="https://github.com/ctdk/goiardi/releases/tag/v0.6.0">version 0.6.0</a>.</p>

<p>Along with some bug fixes and smaller improvements, this release introduces Postgres as a supported database backend. The schema is not compatible with erchef&rsquo;s schema, but is close to the goiardi MySQL schema (with some differences of course). This is the first project I&rsquo;ve done with Postgres, so comments on how goiardi is using it are welcome.</p>

<p>Full CHANGELOG:</p>

<ul>
<li>Postgres support.</li>
<li>Fix rebuilding indexes with an SQL backend.</li>
<li>Fix a bug where in MySQL mode events were being logged twice.</li>
<li>Fix an annoying chef-pedant error with data bags.</li>
<li>Event logging methods that are not allowed now return Method Not Allowed
rather than Bad Request.</li>
<li>Switch the logger to a fork that can be built and used with Windows that
excludes syslog when building on Windows.</li>
<li>Add basic syslog support.</li>
<li>Authentication protocol version 1.2 now supported.</li>
<li>Add a &lsquo;status&rsquo; param to reporting, so a list of reports return by &lsquo;knife
runs&rsquo; can be narrowed by the status of the chef run (started, success, and
failure).</li>
<li>Fix an action at a distance problem with in-memory mode objects. If this
behavior is still desirable (it seems to be slightly faster than the new way),
it can be turned back on with the &mdash;use-unsafe-mem-store flag. This change
DEFINITELY breaks in-mem data file compatibility. If upgrading, export your
data, upgrade goiardi, and reload your data.</li>
<li>Add several new searchable parameters for logged events.</li>
<li>Add organization_id to all MySQL tables that might need it someday. Orgs are
not used at all, so only the default value of 1 currently makes it to the
database.</li>
<li>Finally ran &lsquo;go fmt&rsquo; on goiardi. It didn&rsquo;t even mess up the long comment
blocks, which was what I was afraid it would do. I also ran golint against
goiardi and took its recommendations where it made sense, which was most
areas except for some involving generated parser code, comments on
GobEncode/Decode, commenting a bunch of identical functions on an interface
in search, and a couple of cases involving make and slices. All in all,
though, the reformatting, linting, and light refactoring has done it good.</li>
</ul>


<p>To reiterate, this update breaks saved data file compatibility. You&rsquo;ll need to export and re-import your data if you&rsquo;re using the persistent in-memory data store.</p>

<p>A selection of precompiled binaries are provided on the release page, including Windows and Solaris builds. There are also knife plugins for goiardi&rsquo;s reporting and event logging capabilities at <a href="https://github.com/ctdk/knife-goiardi-reporting">knife-goiardi-reporting</a> and <a href="https://github.com/ctdk/knife-goiardi-event-log">knife-goiardi-event-log</a>. The reporting plugin was forked from the official Chef knife-reporting plugin to add support for the &ldquo;status&rdquo; parameter. Both plugins are also available on rubygems.</p>

<p>Finally, after someone asked how goiardi would handle running ~500 nodes, I decided to take a look and see. I <a href="https://gist.github.com/ctdk/a2d40f03ddfc616e0d42">whipped up a little test script</a> to create a thousand nodes and clients to see how goiardi (and more importantly the search) would handle it. I wasn&rsquo;t particularly worried about the non-search portions of goiardi (1000 rows on a table isn&rsquo;t very much at all, after all), but I hadn&rsquo;t tested search extensively with large amounts of data. After creating those 1,000 nodes and clients, goiardi was using about 1.40 GB of RAM. An earlier test with 5,500 nodes (but no clients) used 6.45GB RAM. The numbers show that there&rsquo;s definitely room for improvement with the search, in that the capability for indexing nodes and data bags is limited by RAM, but performance was good even at 5,500 nodes. More rigorous testing is needed, however. Search is an area I intend to revisit shortly to improve these problems.</p>

<p>The next issues to work on with goiardi are currently improving search to work even better with large amounts of data and use raft (or something similar) to allow multiple goiardi instances to keep their search indexes consistent, reworking the permissions system, being able to upload files to s3 or similar storage providers, and the serf based pushy type thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Goiardi on Solaris/illumos/etc.]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/06/19/building-goiardi-on-solaris-slash-illumos-slash-etc/"/>
    <updated>2014-06-19T21:19:08-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/06/19/building-goiardi-on-solaris-slash-illumos-slash-etc</id>
    <content type="html"><![CDATA[<p>With the recent release of <a href="http://golang.org/doc/go1.3">Go 1.3</a>, Go now has <a href="http://golang.org/doc/go1.3#solaris">experimental support for Solaris and its various derivatives</a>. This means that goiardi will build and run on Solaris, although in an experimental way.</p>

<p>Unfortunately to get Go on Solaris/illumos/etc. you have to build it yourself from source, and at least when I was trying it out with OmniOS in vagrant it did not come with gcc by default. Getting go up so you can try out goiardi (if you don&rsquo;t want to <a href="https://github.com/ctdk/goiardi/releases/tag/v0.5.2">get the binary</a> is pretty straightforward.</p>

<ul>
<li>First, install gcc. <a href="http://omnios.omniti.com/wiki.php/DevEnv">These instructions</a> set you through installing gcc. It wasn&rsquo;t clear to me at first, but you do have to run all the <code>pkg install</code> commands mentioned. First install the appropriate version of gcc, then install those other packages.</li>
</ul>


<p>Once that&rsquo;s done, make sure your PATH is set per the instructions on that page.</p>

<ul>
<li><p>Install git with <code>pkg install developer/versioning/git</code></p></li>
<li><p>Next, download go 1.3: <code>wget http://golang.org/dl/go1.3.src.tar.gz</code> and extract it somewhere. This will be your GOROOT. Set the environment variable with <code>export GOROOT=&lt;go's location&gt;</code> (assuming you&rsquo;re using bash or similar).</p></li>
</ul>


<p>The next steps come from <a href="http://golang.org/doc/install/source">*Installing Go from source</a>:</p>

<ul>
<li><p>In this new GOROOT, <code>cd src/</code>, then run <code>./all.bash</code>. It will build go for you. If it complains about being unable to find unistd.h, you were like me and forgot the second step on that <em>Installing GCC</em> page.</p></li>
<li><p>You want to actually be able to use go, so add it to your path: <code>export PATH=$PATH:$GOROOT/bin</code>.</p></li>
<li><p>Now you need a workspace. In your home directory, run:</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir gocode
</span><span class='line'>mkdir gocode/src
</span><span class='line'>mkdir gocode/bin
</span><span class='line'>mkdir gocode/pkg
</span><span class='line'>export GOPATH=$HOME/gocode
</span><span class='line'>export PATH=$PATH:$GOPATH/bin</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Almost there. All that&rsquo;s left is running</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get -t github.com/ctdk/goiardi
</span><span class='line'>go install github.com/ctdk/goiardi</span></code></pre></td></tr></table></div></figure>


<p>Assuming all went well, you can run <code>goiardi</code> at your prompt with whatever options you want, and it will happily run. After this point using goiardi is like using it on any other platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.5.2 - Block of Dirt]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/06/19/goiardi-version-0-dot-5-2-block-of-dirt/"/>
    <updated>2014-06-19T12:36:31-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/06/19/goiardi-version-0-dot-5-2-block-of-dirt</id>
    <content type="html"><![CDATA[<p>Between the previous goiardi release and this one, my kids discovered Minecraft. This means that <em>I</em> started playing Minecraft, which ended up slowing goiardi development down for a while.</p>

<p>This blocky adversary has been overcome, however, and goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.5.2">version 0.5.2</a> is out.</p>

<p>Originally the next goiardi release was going to add Postgres support. This was about halfway done, and will be resumed shortly, but I decided that it was more important to add the ability to import and export data before any of the goiardi structs changed.</p>

<p>Changes in this release, from the CHANGELOG:</p>

<ul>
<li>Add import/export of goiardi data through a JSON dump.</li>
<li>Add configuration options to specify the max sizes for objects uploaded to the filestore and for JSON requests from the client.</li>
</ul>


<p>Importing and exporting is explained <a href="https://github.com/ctdk/goiardi#import-and-export-of-data">in the README</a> and in <a href="http://godoc.org/github.com/ctdk/goiardi#hdr-Import_and_Export_of_Data">the godocs</a>. Basically you add the <code>-x/--export</code> flag to your usual goiardi command to export the data to a JSON file, and run the <code>-m/--import</code> flags with your new desired goiardi set of flags to import the data. The administrator is responsible for removing any existing data (on-disk or SQL) and index files. This can help with backups or moving between the different storage engines goiardi supports, keeping data between upgrades, and should make testing easier in the future.</p>

<p>Also, per the README, there are new options to specify the maximum size of an object that can be uploaded to the filestore, and the maximum size of a JSON request from a client. The <code>-Q/--obj-max-size</code> flag gets the filestore object max size, while <code>-j/--json-req-max-size</code> sets the JSON request max size limit.</p>

<p>Completely unrelated to any of my efforts, but while I was preparing this release <a href="http://blog.golang.org/go1.3">Go 1.3 was released</a>. Goiardi and its dependencies build just fine with Go 1.3 with no changes. This also means that goiardi should be able run on some of the stranger platforms out there, like Solaris, the illumos based distributions, plan9, and apparently Dragonfly BSD. So far goiardi has only been build on OmniOS r151008j, but it built fine.</p>

<p>Finally, as an added convenience: on <a href="https://github.com/ctdk/goiardi/releases/tag/v0.5.2">the goiardi 0.5.2 release page</a>, precompiled binaries are being provided for download, if you don&rsquo;t feel like setting up go and compiling them yourself. As of this writing binaries are provided for Linux (built on Debian wheezy), MacOS X (built on 10.9 Mavericks), FreeBSD (built on FreeBSD 9.2), and illumos (built on OmniOS r151008j). The Linux, MacOS X, and FreeBSD binaries are x86_64, the illumos binary <strike>i386</strike> <strong>update:</strong> I misinterpreted the output of <code>psrinfo</code> &ndash; it was compiled for 64 bit. It appears that there&rsquo;s no reason that goiardi can&rsquo;t easily be cross compiled though, so a more sensible set of precompiled binaries will be coming soon. If you don&rsquo;t see binaries for your platform, try grabbing a binary that&rsquo;s built on a similar platform to yours, or compile it yourself.</p>

<p>Coming down the pipeline is resuming and re-merging the Postgres work, making some data structures safer for in-memory mode, some extra features for event logging and reporting, improving tests and moving away from depending on chef-pedant, and an idea I&rsquo;ve been kicking around for a serf-based pushy type thing. For those curious about the Postgres goiardi schema, you can see it <a href="https://github.com/ctdk/goiardi-schema/tree/postgres">in the &lsquo;postgres&rsquo; tree in goiardi-schema</a>. It&rsquo;s firmed up, but still subject to change before getting merged back in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knife Plugin for the Goiardi Event Log]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/05/28/knife-plugin-for-the-goiardi-event-log/"/>
    <updated>2014-05-28T20:16:32-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/05/28/knife-plugin-for-the-goiardi-event-log</id>
    <content type="html"><![CDATA[<p>There&rsquo;s now a knife plugin to use with goiardi&rsquo;s new event logging capabilities: <a href="https://github.com/ctdk/knife-goiardi-event-log">knife-goiardi-event-log 0.1.1</a>.</p>

<p>Usage info from the README:</p>

<p>There are four goiardi event log commands: <code>knife goiardi gel list</code>, <code>knife goiardi gel show</code>, <code>knife goiardi gel delete</code> and <code>knife goiardi gel purge</code>.</p>

<p><code>knife goiardi gel list</code> returns a list of logged events. A limit may be specified with <code>--limit</code>; the default limit is 15. An offset may also be specified; the default offset is 0.</p>

<p><code>knife goiardi gel show [id]</code> gives a detailed listing of a particular event log item.</p>

<p><code>knife goiardi gel delete [id]</code> deletes the given event, and prints out a detailed display of the deleted event.</p>

<p><code>knife goiardi gel purge [id]</code> purges all event log items with an id less than the given id. After purging the events, it displays the number of events that were purged.</p>

<hr />

<p>Being able to list events of a certain kind of action, type of object, time range, etc. would be nice and are on the roadmap for this plugin. Adding that capability depends on changes to goairdi before that can happen though. This plugin makes use of all the current event log functionality however.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.5.1 - Rodan Overhead]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/05/26/goiardi-version-0-dot-5-1-rodan-overhead/"/>
    <updated>2014-05-26T11:04:04-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/05/26/goiardi-version-0-dot-5-1-rodan-overhead</id>
    <content type="html"><![CDATA[<p>The sky darkens. Blotting out the sun, Rodan appears to destroy beloved landmarks and stomp on small models of tanks. Goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.5.1">version 0.5.1</a> has been released.</p>

<p>This is an incremental release, made up of bug fixes and relatively minor new features. The most interesting new features are <a href="https://github.com/ctdk/goiardi/tree/cc9aeb1766be7515458dcc6ad6e5260201b0e837#event-logging">event logging</a> and <a href="https://github.com/ctdk/goiardi/tree/cc9aeb1766be7515458dcc6ad6e5260201b0e837#reporting">reporting</a>, although the log level changes are also nice.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>Add log levels (from debug to critical). This makes -V/&mdash;verbose useful.</li>
<li>Add an easier option in the config file to specify log levels by name.</li>
<li>ipv6 already worked, but accidentally. Now it works in a more deliberate
fashion, preventing mishaps with addresses, colons, and port numbers.</li>
<li>Authentication protocol version 1.1 now supported.</li>
<li>Remove a sort on run lists that was there for some reason. I have no idea
what it was put there for, but it was wrong.</li>
<li>Add an event log to log changes to objects like nodes, clients, etc. See the
README or godocs for details.</li>
<li>Add support for reporting (<a href="http://docs.opscode.com/reporting.html"><a href="http://docs.opscode.com/reporting.html">http://docs.opscode.com/reporting.html</a></a>)</li>
</ul>


<p>This release should not break old save files, if you&rsquo;re using that. If you&rsquo;re using MySQL, you&rsquo;ll need to deploy the sqitch changes.</p>

<p>The next big things to start working on are the long promised Postgres support, and etcd/serf/consul etc. integration. Groupcache has also been asked for and looks like a worthwhile thing to pick up. As always, the <a href="https://github.com/ctdk/goiardi/issues?state=open">issues page</a> is a good place to look at what&rsquo;s being worked on.</p>

<p>Goiardi is also starting to grow beyond using chef-pedant for most of its testing; it&rsquo;s about time to start more native golang tests for goiardi and not use chef-pedant for the main tests. It should always work with chef-pedant, of course, but goiardi&rsquo;s starting to get more features that chef-pedant doesn&rsquo;t check.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.5.0 - Stürmisch Bewegt - Now With MySQL]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/05/02/goiardi-version-0-dot-5-0-sturmisch-bewegt-now-with-mysql/"/>
    <updated>2014-05-02T10:10:55-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/05/02/goiardi-version-0-dot-5-0-sturmisch-bewegt-now-with-mysql</id>
    <content type="html"><![CDATA[<p>Stormily agitated, a new goiardi release appears! Goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.5.0">version 0.5.0</a> has been released.</p>

<p>Aside from a few bug fixes, this release brings MySQL support. Now, in addition to running entirely in memory, goiardi can use MySQL for storing data. The <a href="https://github.com/ctdk/goiardi/blob/master/README.md">README</a> and <a href="http://godoc.org/github.com/ctdk/goiardi">godocs</a> explain how to set that up.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>MySQL support added</li>
<li>No longer redirect /environments/NAME/roles/NAME to /roles/NAME/environments/NAME</li>
<li>Update documentation, reformat godocs</li>
<li>Split actors apart into separate user and client types, made new Actor interface that encompasses both users and clients.</li>
</ul>


<p><strong>Note:</strong> This release contains one breaking change. Saved data files from previous goiardi releases will not work with 0.5.0, so if you&rsquo;re in that situation either don&rsquo;t upgrade or remove your saved index and data files before starting up. This will regenerate your admin, validator, and webui keys, and of course nuke anything you had in place before.</p>

<p>Postgres support has already been requested by a few people, so that should be coming fairly soon. The <a href="https://github.com/ctdk/goiardi/issues?state=open">issues page</a> has been filled in with some enhancements that would be nice for goiardi to have. Feel free to add your own if there&rsquo;s something you&rsquo;d like to see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.4.2 - This Is Spinal Tap]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/03/19/goiardi-version-0-dot-4-2-this-is-spinal-tap/"/>
    <updated>2014-03-19T23:04:46-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/03/19/goiardi-version-0-dot-4-2-this-is-spinal-tap</id>
    <content type="html"><![CDATA[<p>It seems like only yesterday that there was a goiardi release, but really it was a few days ago. <a href="https://github.com/ctdk/goiardi/releases/tag/v0.4.2">Goiardi version 0.4.2</a> is hot off the presses and ready for your perusal.</p>

<p>This is a bugfix release. The reason this is the &ldquo;Spinal Tap&rdquo; release was because I noticed these problems while I took the day off after getting a spinal tap and was bored, so it seemed fitting. The bug fixes, from the CHANGELOG, are:</p>

<ul>
<li>Perm tweak for nodes updating themselves.</li>
<li>Small change with validating role descriptions when creating or updating from JSON.</li>
<li>Fix issue with saving complicated indexed objects to disk where improperly flattened indexable objects were making the gob encoder puke all over itself when encoding the tries in the index docs.</li>
<li>Fixed a possible regression with synchronizing cookbooks that did not show up in testing, but only in real use.</li>
<li>An absolutely bonkers fix for listing cookbook files with webui. Webui wants all of the cookbook top level attributes sent over with a request to /cookbooks/&lt;name&gt;/&lt;version&gt;, but this is the exact <em>opposite</em> of the behavior chef-pedant wants, where empty definitions, attributes, etc. are not sent over. Knife also seems quite content with this, so the fix for now, since the two cases are mutually exclusionary, is to only send the empty hashes for those top level attributes with a GET if the request is coming from the webui. Bizarre, but it seems to be what&rsquo;s necessary.</li>
</ul>


<p>These were all problems that evaded notice during testing, but did pop up when I was using goiardi to set up a vagrant VM to start working on letting goiardi run a real database (optionally, of course) instead of the in-memory data store system it&rsquo;s using now. The in-memory mode is great and all for testing, and being able to freeze the data to disk for persistence is very handy, but being able to use a real database would be nice for some workloads. Supporting both the current in-memory storage and a database backend is a top priority.</p>

<p>Which database to use is still a bit up in the air, but I&rsquo;m leaning towards throwing caution to the wind and providing support for both MySQL and Postgres, with SQLite as a distinct possibility down the line. MySQL is likely to come first, but that is not set in stone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.4.1 Release]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/03/16/goiardi-version-0-dot-4-1-release/"/>
    <updated>2014-03-16T14:32:27-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/03/16/goiardi-version-0-dot-4-1-release</id>
    <content type="html"><![CDATA[<p>Hot on the heels of the 0.4.0 release comes <a href="https://github.com/ctdk/goiardi/releases/tag/v0.4.1">goiardi version 0.4.1</a>. This release adds a <tt>&mdash;disable-webui</tt> option to disable using chef-webui with goiardi, fixes a bug with parsing configuration file options and rearranges how some of the config struct items are set, fixes a typo in the sample config file, and makes some small documentation tweaks.</p>

<p>Other than that, all the changes announced in the <a href="http://ctdk.github.io/goiardi/blog/2014/03/16/version-0-dot-4-0-of-goiardi-released/">0.4.0 release announcement</a> and previous releases remain relevant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Version 0.4.0 of Goiardi Released. Now, With Authentication!]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/03/16/version-0-dot-4-0-of-goiardi-released/"/>
    <updated>2014-03-16T10:28:50-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/03/16/version-0-dot-4-0-of-goiardi-released</id>
    <content type="html"><![CDATA[<p>A new version of goiardi, <a href="https://github.com/ctdk/goiardi/releases/tag/v0.4.0">version 0.4.0</a>, as been released.</p>

<p>This version fixes a bug with pessimistic matching, adds more tests, improves the documentation with an expanded <a href="https://github.com/ctdk/goiardi/blob/master/README.md">README</a> and <a href="http://godoc.org/github.com/ctdk/goiardi">more godocs</a>, and introduces client/user authentication and authorization and SSL for connections as optional settings. It will also run and authenticate properly with the chef webui, if you&rsquo;re so inclined. The webui is a separate install, however, and does not ship with goiardi.</p>

<p>There is also a <a href="https://github.com/ctdk/chef-pedant">fork of chef-pedant</a> customized for goiardi now, to handle some tests with authentication where goiardi and the chef-server make slightly different decisions.</p>

<p>Goiardi still works fine in no-auth mode. The authentication and authorization parts are completely optional, but they&rsquo;re there if you want or need authentication. It&rsquo;s recommended that if you do use authentication that you should set the <tt>&mdash;index-file</tt> and <tt>&mdash;data-file</tt> options for persistent data and index storage, but it&rsquo;s not strictly necessary. See the <a href="https://github.com/ctdk/goiardi/blob/master/README.md">README</a> for more on how to set up authentication.</p>

<p>SSL is pretty straightforward, and also explained in the README. You&rsquo;ll need to <a href="http://stackoverflow.com/questions/10175812/how-to-build-a-self-signed-certificate-with-openssl">generate a certificate/key pair</a> for it to work, but that isn&rsquo;t too hard. This does assume that you&rsquo;d use a self-signed certificate for this; if you&rsquo;re going to use a real cert I assume you know what you&rsquo;re doing (and am a little surprised, to be honest).</p>

<p>That&rsquo;s it for this release. The next major goiardi task coming up, barring any unexpected changes, is allowing it to use a database for the backend. This will be optional, of course; I plan on supporting the in-memory, no-auth mode a la chef-zero for goiardi indefinitely. Further out, there may be a smoother installation process, and someday even perhaps goiardi-specific features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meanwhile, in the Auth Branch...]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/03/13/meanwhile-in-the-auth-branch/"/>
    <updated>2014-03-13T10:03:30-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/03/13/meanwhile-in-the-auth-branch</id>
    <content type="html"><![CDATA[<p>While there is still some work remaining with finishing some needed authorization checks, I&rsquo;m happy to report that in the <a href="https://github.com/ctdk/goiardi/tree/auth">goiardi auth branch</a>, authentication for chef clients and webui is working and passing the chef-pedant tests.</p>

<p>Once those authorization issues are ironed out, I&rsquo;ll start work on updating the documentation and making a new formal release. If, in the meantime, anyone felt like testing it, it&rsquo;s pretty easy. Start goiardi with the <tt>-A</tt> or <tt>&#8211;use-auth</tt> flags, and set <tt>&#8211;conf-root</tt> to whereever you&rsquo;d like the chef-validator, chef-webui, and admin certificates to be stored. You&rsquo;d probably also want to specify index and data files for persistence, but you don&rsquo;t have to. Goiardi works with chef-webui fine as well, but at the moment you&rsquo;ll have to set a password for the admin user with knife.</p>

<p>As of this writing goiardi authentication is still a work in progress, but it&rsquo;s far enough along to start banging on to look for problems. The chef-pedant tests are pretty happy, but that doesn&rsquo;t always catch every real world issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Version 0.3.3 of Goiardi Released]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/02/16/version-0-dot-3-1-of-goiardi-released/"/>
    <updated>2014-02-16T11:46:49-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/02/16/version-0-dot-3-1-of-goiardi-released</id>
    <content type="html"><![CDATA[<p>I am pleased to announce another goiardi release.</p>

<p>This release, <a href="https://github.com/ctdk/goiardi/releases/tag/v0.3.3">version 0.3.3 of goiardi</a>, doesn&rsquo;t add much in the way of new functionality. The data store and indexer have been tweaked slightly, and go tests have been added for some of the goiardi components. The go test coverage isn&rsquo;t complete, and most goiardi testing is handled with chef-pedant, but these golang tests will be handy for testing internal functionality that could break, yet not show up in the chef-pedant testing.</p>

<p>While there isn&rsquo;t much in this release, I decided to make one here because it&rsquo;s a good place to make one before starting to tackle authentication. Enjoy.</p>

<p><strong>Update:</strong> It&rsquo;s a little embarrassing, but there was a problem merging branches, and a necessary change got backed out or overlooked, so version 0.3.1 has been superseded by version 0.3.3. On the off chance anyone got the previous version, I apologize.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Test Coverage Progressing]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/02/13/go-test-coverage-progressing/"/>
    <updated>2014-02-13T09:28:49-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/02/13/go-test-coverage-progressing</id>
    <content type="html"><![CDATA[<p>It&rsquo;s in progress, but goiardi&rsquo;s getting actual golang test coverage. It&rsquo;s being built out in the <a href="https://github.com/ctdk/goiardi/tree/test_writing">test_writing</a> branch, and so far has coverage with the crypto, data store, indexer, and utility libraries inside goiardi. Already the data store and indexer save and load functions have been reworked to make testing easier, and more tests will be coming soon.</p>

<p>Previously goiardi testing was done with chef-pedant, and that will continue to be the primary means of testing goiardi. However, there are areas where actual go tests will be useful, particularly with things like the data store and indexer that don&rsquo;t get quite as exercised by chef-pedant. My current thinking is that the go tests should focus more on internals, while chef-pedant coverage is important for testing its public behavior.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save Persistent Store Fix]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/01/18/save-persistent-store-fix/"/>
    <updated>2014-01-18T15:10:27-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/01/18/save-persistent-store-fix</id>
    <content type="html"><![CDATA[<p>Pushed up a change in the latest goiardi master last night that fixes an issue with saving the persistent index and data store files where, if the temp directory was not on the same partition, renaming the file after saving would cause an error. I was clued into this by a tweet in Japanese that seemed to say something about that. Ooops.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reindexing Search Capability Added]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/01/09/reindexing-search-capability-added/"/>
    <updated>2014-01-09T23:32:11-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/01/09/reindexing-search-capability-added</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ctdk/goiardi/commit/7777fd82cb767007a22253c98c02e97f2f0a5bbf">As of the most recent commit</a>, goiardi can now rebuild its search index in case it accidentally got deleted or corrupted somehow.</p>

<p>To rebuild, just run <code>knife index rebuild</code> (or <code>knife index rebuild -y</code> if you don&rsquo;t want to be bothered to press &ldquo;y&rdquo; to confirm that you really want to do it). You&rsquo;ll get a message from knife that &lsquo;knife index rebuild&rsquo; has been removed for Chef 11+ servers. This can be ignored; while goiardi identifies itself as a Chef 11+ server, this command will work because they&rsquo;ve kept it in for older versions of Chef.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Version 0.3.0 of Goiardi Released]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/01/06/version-0-dot-3-0-of-goiardi-released/"/>
    <updated>2014-01-06T21:09:00-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/01/06/version-0-dot-3-0-of-goiardi-released</id>
    <content type="html"><![CDATA[<p><em>Originally posted on <a href="http://time.to.pullthepl.ug/blog/2014/1/6/version-0-dot-3-0-of-goiardi-released/">time.to.pullthepl.ug</a>.</em></p>

<p>I am pleased to announce another <a href="https://github.com/ctdk/goiardi">goiardi</a> (a <a href="http://getchef.com/chef/">Chef</a> server written in go) release.</p>

<p><a href="https://github.com/ctdk/goiardi/releases/tag/v0.3.0">Version 0.3.0 of goiardi</a> adds the ability to save the in-memory data store and the search index to disk, rather than losing everything everytime the server restarts. If the options are set, goiardi will save when it receives a SIGTERM or SIGINT signal, as well as save in the background periodically. The interval defaults to five minutes, but can be specified as an option as well. In the interest of safety and data integrity, goiardi will first save to a temporary file before renaming it to the save file name.</p>

<p>Of course, goiardi will also still happily run entirely in memory as before.</p>

<p><strong>NB:</strong> Bear in mind that even if the data has been saved to disk goiardi still keeps the data store and search index in memory while it&rsquo;s running. This could cause problems if you try to shove too much data into it. I expect most use cases would have no problems (famous last words), but the appropriate caution is warranted.</p>

<p>It still does no authentication or permission checking, and while it does its best to avoid data corruption and data loss it is not a real database and should not be relied on as such. It may be useful for situations where you do not want or need a full real Chef server, but could use persistent data which you don&rsquo;t get with chef-zero.</p>

<p>Next tasks coming up: provide a way to reindex the data, improve existing docs as needed and write more, make actual go tests, fork chef-pedant and make a &ldquo;goiardi&rdquo; mode to simplify testing against chef-pedant.</p>

<p>Anyway, that&rsquo;s what this release has. Have fun with it if you&rsquo;re so inclined, and thank you if you do.</p>
]]></content>
  </entry>
  
</feed>

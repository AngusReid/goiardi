<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Go | Goiardi]]></title>
  <link href="http://ctdk.github.io/goiardi/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://ctdk.github.io/goiardi/"/>
  <updated>2014-07-21T23:09:46-07:00</updated>
  <id>http://ctdk.github.io/goiardi/</id>
  <author>
    <name><![CDATA[Jeremy Bingham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Version 0.3.0 of Goiardi Released]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/01/06/version-0-dot-3-0-of-goiardi-released/"/>
    <updated>2014-01-06T21:09:00-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/01/06/version-0-dot-3-0-of-goiardi-released</id>
    <content type="html"><![CDATA[<p><em>Originally posted on <a href="http://time.to.pullthepl.ug/blog/2014/1/6/version-0-dot-3-0-of-goiardi-released/">time.to.pullthepl.ug</a>.</em></p>

<p>I am pleased to announce another <a href="https://github.com/ctdk/goiardi">goiardi</a> (a <a href="http://getchef.com/chef/">Chef</a> server written in go) release.</p>

<p><a href="https://github.com/ctdk/goiardi/releases/tag/v0.3.0">Version 0.3.0 of goiardi</a> adds the ability to save the in-memory data store and the search index to disk, rather than losing everything everytime the server restarts. If the options are set, goiardi will save when it receives a SIGTERM or SIGINT signal, as well as save in the background periodically. The interval defaults to five minutes, but can be specified as an option as well. In the interest of safety and data integrity, goiardi will first save to a temporary file before renaming it to the save file name.</p>

<p>Of course, goiardi will also still happily run entirely in memory as before.</p>

<p><strong>NB:</strong> Bear in mind that even if the data has been saved to disk goiardi still keeps the data store and search index in memory while it&rsquo;s running. This could cause problems if you try to shove too much data into it. I expect most use cases would have no problems (famous last words), but the appropriate caution is warranted.</p>

<p>It still does no authentication or permission checking, and while it does its best to avoid data corruption and data loss it is not a real database and should not be relied on as such. It may be useful for situations where you do not want or need a full real Chef server, but could use persistent data which you don&rsquo;t get with chef-zero.</p>

<p>Next tasks coming up: provide a way to reindex the data, improve existing docs as needed and write more, make actual go tests, fork chef-pedant and make a &ldquo;goiardi&rdquo; mode to simplify testing against chef-pedant.</p>

<p>Anyway, that&rsquo;s what this release has. Have fun with it if you&rsquo;re so inclined, and thank you if you do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Goiardi]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2013/12/31/introducing-goiardi/"/>
    <updated>2013-12-31T12:32:00-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2013/12/31/introducing-goiardi</id>
    <content type="html"><![CDATA[<p><em>Originally posted on <a href="http://time.to.pullthepl.ug/blog/2013/12/31/introducing-goiardi/">time.to.pullthepl.ug</a>.</em></p>

<p>A while back, I decided that I would like to learn <a href="http://golang.org/">Go</a>, which is a pretty neat language all around (in my humble opinion). I had to come up with some sort of project that would be ambitious enough to teach myself a lot of the language features, but not so huge that I&rsquo;d give up in frustration. Then I thought of a name, and realized what I had to do.</p>

<p>After many evenings spent coding, I&rsquo;m proud to announce the first offical release of <a href="https://github.com/ctdk/goiardi">Goiardi</a>, an in-memory Chef server written in Go (the <a href="https://github.com/ctdk/goiardi/blob/master/README.md">README</a> has more information). (I started on it before I found out about Chef-Zero, but I decided to keep at it anyway. Chef-Zero was also a huge help in figuring out what the Chef server behavior ought to be.) At this time it has pretty much all the features Chef-Zero does, but sorting searches isn&rsquo;t working yet. If anyone has real examples of how those sorts are specified, I&rsquo;d love to hear them.</p>

<p>Goiardi does not support authenication or validation at all, so it isn&rsquo;t very secure. Of course, it also doesn&rsquo;t persist its contents, so you probably shouldn&rsquo;t rely on it for your infrastructure provisioning needs.</p>

<p>Aside from the authentication and permission tests, goiardi performs pretty well against chef-pedant. There are a few minor tests that fail because of slight JSON formatting differences or error messages that don&rsquo;t agree with chef-pedant, but otherwise it does quite well. Improving its performance against chef-pedant is, of course, an ongoing concern. It should do fine as a stand-in for chef-zero though, or some other situation where you need a chef server running but don&rsquo;t care if it loses all its information when it quits.</p>

<p>Goiardi is, like many Chef things, open source and licensed under version 2.0 of the Apache License.</p>

<h3>The Future</h3>

<p>Where to go from here? Goiardi certainly has a lot of room for improvement. The first things I intend to do with it are allowing you to use a config file to store options, and allowing freezing the in-memory data structures to disk so they persist when goiardi is shut down. Those aren&rsquo;t in this release because if I kept adding &ldquo;just one more thing&rdquo; before making a formal release, I&rsquo;d never actually get it out.</p>

<p>Further in the future, handling real authenication and permissions is pretty important. A real Chef Server mode, where goiardi uses Solr and a real database, is on the roadmap down the road as well. SSL, better documentation, and making the Go code more idiomatic where needed are also on the TODO list.</p>

<p>Anyway, there is is. Feel free to check it out, bang on it, see where it breaks (and where it works). Suggestions, code, and comments are always welcome. Hopefully the comments are nice, but this <em>is</em> the Internet.</p>

<p><strong>Update:</strong> At least part of the future is now. Goiardi has config file support now with 0.2.1, huzzah! This release also fixes a problem building goiardi with more recent versions of go-flags.</p>

<p>Goiardi has been tested to compile with the native go compiler and run on Mac OS X (10.7 and 10.8), Debian &lsquo;wheezy&rsquo;, and Arch Linux. It also builds and runs with gccgo (using the <code>-compiler gccgo</code> option to <code>go</code>), tested on Arch Linux. Efforts are ongoing to get it to build with gccgo without the <code>go</code> command on OmniOS, but so far they&rsquo;ve been unsuccessful.</p>

<h3>The Name</h3>

<p>If you&rsquo;re wondering about the name, <a href="http://en.wikipedia.org/wiki/Ettore_Boiardi">Ettore Boiardi</a> was the real Chef Boyardee. Wakka wakka.</p>
]]></content>
  </entry>
  
</feed>

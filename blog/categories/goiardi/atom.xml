<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Goiardi | Goiardi]]></title>
  <link href="http://ctdk.github.io/goiardi/blog/categories/goiardi/atom.xml" rel="self"/>
  <link href="http://ctdk.github.io/goiardi/"/>
  <updated>2014-03-16T14:48:40-07:00</updated>
  <id>http://ctdk.github.io/goiardi/</id>
  <author>
    <name><![CDATA[Jeremy Bingham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.4.1 Release]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/03/16/goiardi-version-0-dot-4-1-release/"/>
    <updated>2014-03-16T14:32:27-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/03/16/goiardi-version-0-dot-4-1-release</id>
    <content type="html"><![CDATA[<p>Hot on the heels of the 0.4.0 release comes <a href="https://github.com/ctdk/goiardi/releases/tag/v0.4.1">goiardi version 0.4.1</a>. This release adds a <tt>&mdash;disable-webui</tt> option to disable using chef-webui with goiardi, fixes a bug with parsing configuration file options and rearranges how some of the config struct items are set, fixes a typo in the sample config file, and makes some small documentation tweaks.</p>

<p>Other than that, all the changes announced in the <a href="http://ctdk.github.io/goiardi/blog/2014/03/16/version-0-dot-4-0-of-goiardi-released/">0.4.0 release announcement</a> and previous releases remain relevant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Version 0.3.3 of Goiardi Released]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/02/16/version-0-dot-3-1-of-goiardi-released/"/>
    <updated>2014-02-16T11:46:49-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/02/16/version-0-dot-3-1-of-goiardi-released</id>
    <content type="html"><![CDATA[<p>I am pleased to announce another goiardi release.</p>

<p>This release, <a href="https://github.com/ctdk/goiardi/releases/tag/v0.3.3">version 0.3.3 of goiardi</a>, doesn&rsquo;t add much in the way of new functionality. The data store and indexer have been tweaked slightly, and go tests have been added for some of the goiardi components. The go test coverage isn&rsquo;t complete, and most goiardi testing is handled with chef-pedant, but these golang tests will be handy for testing internal functionality that could break, yet not show up in the chef-pedant testing.</p>

<p>While there isn&rsquo;t much in this release, I decided to make one here because it&rsquo;s a good place to make one before starting to tackle authentication. Enjoy.</p>

<p><strong>Update:</strong> It&rsquo;s a little embarrassing, but there was a problem merging branches, and a necessary change got backed out or overlooked, so version 0.3.1 has been superseded by version 0.3.3. On the off chance anyone got the previous version, I apologize.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save Persistent Store Fix]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/01/18/save-persistent-store-fix/"/>
    <updated>2014-01-18T15:10:27-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/01/18/save-persistent-store-fix</id>
    <content type="html"><![CDATA[<p>Pushed up a change in the latest goiardi master last night that fixes an issue with saving the persistent index and data store files where, if the temp directory was not on the same partition, renaming the file after saving would cause an error. I was clued into this by a tweet in Japanese that seemed to say something about that. Ooops.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reindexing Search Capability Added]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/01/09/reindexing-search-capability-added/"/>
    <updated>2014-01-09T23:32:11-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/01/09/reindexing-search-capability-added</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ctdk/goiardi/commit/7777fd82cb767007a22253c98c02e97f2f0a5bbf">As of the most recent commit</a>, goiardi can now rebuild its search index in case it accidentally got deleted or corrupted somehow.</p>

<p>To rebuild, just run <code>knife index rebuild</code> (or <code>knife index rebuild -y</code> if you don&rsquo;t want to be bothered to press &ldquo;y&rdquo; to confirm that you really want to do it). You&rsquo;ll get a message from knife that &lsquo;knife index rebuild&rsquo; has been removed for Chef 11+ servers. This can be ignored; while goiardi identifies itself as a Chef 11+ server, this command will work because they&rsquo;ve kept it in for older versions of Chef.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Version 0.3.0 of Goiardi Released]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/01/06/version-0-dot-3-0-of-goiardi-released/"/>
    <updated>2014-01-06T21:09:00-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/01/06/version-0-dot-3-0-of-goiardi-released</id>
    <content type="html"><![CDATA[<p><em>Originally posted on <a href="http://time.to.pullthepl.ug/blog/2014/1/6/version-0-dot-3-0-of-goiardi-released/">time.to.pullthepl.ug</a>.</em></p>

<p>I am pleased to announce another <a href="https://github.com/ctdk/goiardi">goiardi</a> (a <a href="http://getchef.com/chef/">Chef</a> server written in go) release.</p>

<p><a href="https://github.com/ctdk/goiardi/releases/tag/v0.3.0">Version 0.3.0 of goiardi</a> adds the ability to save the in-memory data store and the search index to disk, rather than losing everything everytime the server restarts. If the options are set, goiardi will save when it receives a SIGTERM or SIGINT signal, as well as save in the background periodically. The interval defaults to five minutes, but can be specified as an option as well. In the interest of safety and data integrity, goiardi will first save to a temporary file before renaming it to the save file name.</p>

<p>Of course, goiardi will also still happily run entirely in memory as before.</p>

<p><strong>NB:</strong> Bear in mind that even if the data has been saved to disk goiardi still keeps the data store and search index in memory while it&rsquo;s running. This could cause problems if you try to shove too much data into it. I expect most use cases would have no problems (famous last words), but the appropriate caution is warranted.</p>

<p>It still does no authentication or permission checking, and while it does its best to avoid data corruption and data loss it is not a real database and should not be relied on as such. It may be useful for situations where you do not want or need a full real Chef server, but could use persistent data which you don&rsquo;t get with chef-zero.</p>

<p>Next tasks coming up: provide a way to reindex the data, improve existing docs as needed and write more, make actual go tests, fork chef-pedant and make a &ldquo;goiardi&rdquo; mode to simplify testing against chef-pedant.</p>

<p>Anyway, that&rsquo;s what this release has. Have fun with it if you&rsquo;re so inclined, and thank you if you do.</p>
]]></content>
  </entry>
  
</feed>

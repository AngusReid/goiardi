<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Releases | Goiardi]]></title>
  <link href="http://ctdk.github.io/goiardi/blog/categories/releases/atom.xml" rel="self"/>
  <link href="http://ctdk.github.io/goiardi/"/>
  <updated>2014-10-15T14:56:52-07:00</updated>
  <id>http://ctdk.github.io/goiardi/</id>
  <author>
    <name><![CDATA[Jeremy Bingham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.8.1 and Schob Version 0.1.1 - Hand of Ishtar, Hand of Nergal]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/10/15/goiardi-version-0-dot-8-1-and-schob-version-0-dot-1-1-hand-of-ishtar-hand-of-nergal/"/>
    <updated>2014-10-15T13:17:58-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/10/15/goiardi-version-0-dot-8-1-and-schob-version-0-dot-1-1-hand-of-ishtar-hand-of-nergal</id>
    <content type="html"><![CDATA[<p>In ancient Mesopotamia, diseases were often referred to as being the &ldquo;hand&rdquo; of some god. The hand of Nergal was a plague of some kind, while the hand of Ishtar was some kind of STD. Ishtar is generally identified with the Greek Aphrodite and Roman Venus as a goddess of love (although she was by no means identical to Aphrodite and Venus), so the name&rsquo;s quite appropriate. The word &ldquo;venereal&rdquo; ultimately derives from &ldquo;Venus&rdquo;, after all.</p>

<p>These are two minor releases. <a href="https://github.com/ctdk/goiardi/releases/tag/v0.8.1">Goiardi version 0.8.1</a> moves the bulk of the documentation from the README to <a href="http://goiardi.readthedocs.org/en/latest/index.html">readthedocs</a>, where it should be much easier to read and work on, fixes a small issue with the postgres SQL dump file, and disables SSLv3. <a href="https://github.com/ctdk/schob/releases/tag/v0.1.1">Schob 0.1.1</a>  adds a fix to allow building schob on 32 bit platforms and on Windows, and updates links to the goiardi shovey documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.8.0 (Plus Shovey) - Hojotoho! Hojotoho!]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/09/29/goiardi-version-0-dot-8-0-plus-shovey-hojotoho-hojotoho/"/>
    <updated>2014-09-29T23:25:23-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/09/29/goiardi-version-0-dot-8-0-plus-shovey-hojotoho-hojotoho</id>
    <content type="html"><![CDATA[<p>In honor of the upcoming <a href="https://www.getchef.com/summit/">Chef Summit</a>, there are new releases from goiardi and friends. This officially brings out <a href="https://github.com/ctdk/goiardi#shovey">shovey</a>, the goiardi push jobs facility, to the world.</p>

<p>Because of the relative complexity of shovey, there are actually three releases here:</p>

<ul>
<li><a href="https://github.com/ctdk/goiardi/releases/tag/v0.8.0">goiardi v0.8.0 &ndash; Hojotoho! Hojotoho!</a></li>
<li><a href="https://github.com/ctdk/schob/releases/tag/v0.1.0">schob v0.1.0 &ndash; Heiaha! Heiaha!</a></li>
<li><a href="https://github.com/ctdk/knife-shove/releases/tag/v0.6.0">knife-shove v0.6.0 &ndash; Helmwige! Hier!</a></li>
</ul>


<p>Astute readers may recognize the releases' codenames as the opening lines of <a href="https://www.youtube.com/watch?v=cg0rmuoqo7U">Act III of <i>Die Walk√ºre</i></a>.</p>

<p>Shovey&rsquo;s included with goiardi. Schob is the shovey client that gets installed on the nodes that will run jobs, and knife-shove is a knife plugin forked from knife-push to manage shovey jobs. The <a href="https://github.com/ctdk/goiardi/blob/master/README.md#shovey">goiardi shovey docs</a>, the <a href="https://github.com/ctdk/schob/blob/master/README.md">schob README</a>, and the <a href="https://github.com/ctdk/knife-shove/blob/master/README.rdoc">knife-shove README</a> have a bunch of documentation on how to use shovey.</p>

<p>Nice, functional cookbooks for shovey and goiardi are also coming. There is a <a href="https://github.com/ctdk/shovey-jobs">shovey-jobs</a> cookbook already, but it only supports Debian. Other platforms are being added, and will be ready soon.</p>

<p>Also coming reasonably soon are organizations and RBAC (it&rsquo;s finally time), and revamping the documentation. The README has gotten too long and unweildy. It will be split apart, reorganized, and expanded where needed, while the godocs for goiardi will stop being a mirror of the README and focus more on development and internals.</p>

<p>See you at the Summit!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.7.2 - the Yak of Seville]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/08/09/goiardi-version-0-dot-7-2-the-yak-of-seville/"/>
    <updated>2014-08-09T16:01:06-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/08/09/goiardi-version-0-dot-7-2-the-yak-of-seville</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ctdk/goiardi/releases/tag/v0.7.2">Goiardi version 0.7.2</a> is a minor yak shaving release that there isn&rsquo;t a lot to say about. The CHANGELOG pretty much sums it up:</p>

<ul>
<li>Remove a newline in a debug statement, courtesy of <a href="https://github.com/spheromak">@spheromak</a>.</li>
<li>Also per <a href="https://github.com/spheromak">@spheromak</a>&rsquo;s suggestion, fixed some possible race conditions revealed by building goiardi with the <code>-race</code> flag and running chef-pedant against it.</li>
<li>Edit doc.go slightly to make godocs more attractive.</li>
</ul>


<p>Elsewhere, shovey work continues and comes closer to completion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.7.1 - Constant Manatee Attacks]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/07/29/goiardi-version-0-dot-7-1-constant-manatee-attacks/"/>
    <updated>2014-07-29T22:32:13-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/07/29/goiardi-version-0-dot-7-1-constant-manatee-attacks</id>
    <content type="html"><![CDATA[<p>The media refuses to report on this scourge afflicting the Florida coast, which is why you never hear about it.</p>

<p>&ldquo;Shovey&rdquo; is chugging along on a fast pace, but in the meantime a couple of issues came up that I thought deserved attention. Goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.7.1">version 0.7.1</a> is a minor release, addressing two relatively small issues.</p>

<p>First, this release adds options for configuring the db pool size and max number of connections. It was happening automagically before, but I was always a bit uneasy about that. Until last night, though, I kept missing how to set that in the documentation for <code>database/sql</code>.</p>

<p>Second, for cookbook files stored locally (which is currently all of them), goiardi will now set the URL of the resource to use the current configured hostname. This was brought to my attention because someone had uploaded a bunch of cookbooks, changed the hostname and port and turned on SSL, and had the URLs break. It takes a specific chain of events to see the problem, which is why it had gone unnoticed up to this point.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>Add &mdash;db-pool-size and &mdash;max-connections options for configuring the number
of idle db connections kept around and the maximum number of db connections
to make to the server. It isn&rsquo;t particularly useful if you&rsquo;re not using one
of the SQL backends.</li>
<li>For locally stored cookbook files (which is currently all of them), goiardi
now generates the URL to the resource from the currently configured
hostname. This fixes an issue where if you uploaded a cookbook and then
changed the goairdi server&rsquo;s hostname, the URLs to download cookbooks would
break.</li>
</ul>


<p>Other than that, there&rsquo;s nothing else new in this release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.7.0 - Orphans of the Sky]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/07/21/goiardi-version-0-dot-7-0-orphans-of-the-sky/"/>
    <updated>2014-07-21T22:40:32-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/07/21/goiardi-version-0-dot-7-0-orphans-of-the-sky</id>
    <content type="html"><![CDATA[<p>In case you haven&rsquo;t read it, <em><a href="http://en.wikipedia.org/wiki/Orphans_of_the_Sky">Orphans of the Sky</a></em> is a novel by Robert A. Heinlein about a generation ship floating through space where the people on board have forgotten that they are on a space ship. It&rsquo;s pretty good, but more importantly the name of the first of the two novellas that make up the novel is titled &ldquo;Universe&rdquo;. The title of the second part, &ldquo;Common Sense&rdquo;, became relevant after I really dug into making this release for reasons that will soon become clear.</p>

<p>While it ended up being a bigger deal than I expected it to be, I am pleased to announce the release of goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.7.0">version 0.7.0</a>.</p>

<p>I took what I thought would be a brief detour from my current work on the serf integration and &ldquo;shovey&rdquo; stuff for goiardi to implement <a href="https://github.com/opscode/chef-rfc/blob/master/rfc014-universe-endpoint.md">Chef RFC 014</a> real quick like, which I had been considering doing even before the RFC came along. I had been planning on making this a small release numbered 0.6.1, but then after I proposed a mechanism for caching the universe endpoint it was suggested in the RFC discussion that I see how goiardi performed with the full load of cookbooks in the supermarket before jumping the gun and adding caching before it was necessarily needed.</p>

<p>It turned out that will over 6,000 cookbooks the universe endpoint ran like a dog. Ultimately the problem boiled down to using gob to encode the complex data structures in cookbooks, nodes, etc. in the database. Generally gob encoding in golang is faster than using JSON, but in this particular case JSON is actually faster. The &ldquo;common sense&rdquo; thing to do was to change how those complex structures are stored in the database, even though it&rsquo;s a bit of a brutal change. Sometimes, though, you have to bite the bullet and do the thing that sucks. It&rsquo;s ended up working nicely, however; the postgres implementation is now able to make use of the json type and the json functions built into Postgres. Before switching from gob to json, serving <code>/universe</code> with over 6200 cookbooks took over 3 seconds with Postgres or MySQL, but afterwards Postgres can serve it in roughly 325 milliseconds. MySQL isn&rsquo;t able to take advantage of the Postgres-specific json functionality, but it still went down to 1 second, so that&rsquo;s a marked improvement. Using the in-memory (with or without file backing) takes about 1.2 seconds. I&rsquo;m willing to take this; if you have that many cookbooks and can&rsquo;t wait a second for <code>/universe</code>, you may want to use Postgres for your data store.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>Add /universe API endpoint, per
<a href="https://github.com/opscode/chef-rfc/blob/master/rfc014-universe-endpoint.md.">https://github.com/opscode/chef-rfc/blob/master/rfc014-universe-endpoint.md.</a></li>
<li>Make file uploading a little more forgiving.</li>
<li>Make validating some cookbook metadata more forgiving, to bring goiardi&rsquo;s
validations in line with erchef.</li>
<li>Added some functions to make listing all cookbooks and recipes on the
server faster and move the logic into the cookbook package.</li>
<li><p>Breaking DB change: with both MySQL and Postgres, the way data structures
for cookbooks, nodes, etc. has changed from gob encoding to using JSON. This
obviously breaks existing items in the database, so the following steps must
be followed by users using either SQL backend for data storage:</p>

<ul>
<li>Export their goiardi server&rsquo;s data with the <code>-x</code> flag.</li>
<li>Either revert all changes to the db with sqitch, then redeploy, or drop
the database manually and recreate it from either the sqitch patches or
the full table dump of the release (provided starting with 0.7.0)</li>
<li>Reload the goiardi data with the <code>-m</code> flag.
See the README or the godocs for more information.</li>
</ul>
</li>
</ul>


<p>More documentation on the universe endpoint in goiardi is <a href="https://github.com/ctdk/goiardi#berks-universe-endpoint">available in the README</a>. Specific information on upgrading is also in the README in the <a href="https://github.com/ctdk/goiardi#upgrading">UPGRADING</a> section.</p>

<p>Back to the serf/shovey stuff, then.</p>
]]></content>
  </entry>
  
</feed>

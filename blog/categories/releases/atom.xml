<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Releases | Goiardi]]></title>
  <link href="http://ctdk.github.io/goiardi/blog/categories/releases/atom.xml" rel="self"/>
  <link href="http://ctdk.github.io/goiardi/"/>
  <updated>2014-09-30T13:59:03-07:00</updated>
  <id>http://ctdk.github.io/goiardi/</id>
  <author>
    <name><![CDATA[Jeremy Bingham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.8.0 (Plus Shovey) - Hojotoho! Hojotoho!]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/09/29/goiardi-version-0-dot-8-0-plus-shovey-hojotoho-hojotoho/"/>
    <updated>2014-09-29T23:25:23-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/09/29/goiardi-version-0-dot-8-0-plus-shovey-hojotoho-hojotoho</id>
    <content type="html"><![CDATA[<p>In honor of the upcoming <a href="https://www.getchef.com/summit/">Chef Summit</a>, there are new releases from goiardi and friends. This officially brings out <a href="https://github.com/ctdk/goiardi#shovey">shovey</a>, the goiardi push jobs facility, to the world.</p>

<p>Because of the relative complexity of shovey, there are actually three releases here:</p>

<ul>
<li><a href="https://github.com/ctdk/goiardi/releases/tag/v0.8.0">goiardi v0.8.0 &ndash; Hojotoho! Hojotoho!</a></li>
<li><a href="https://github.com/ctdk/schob/releases/tag/v0.1.0">schob v0.1.0 &ndash; Heiaha! Heiaha!</a></li>
<li><a href="https://github.com/ctdk/knife-shove/releases/tag/v0.6.0">knife-shove v0.6.0 &ndash; Helmwige! Hier!</a></li>
</ul>


<p>Astute readers may recognize the releases' codenames as the opening lines of <a href="https://www.youtube.com/watch?v=cg0rmuoqo7U">Act III of <i>Die Walk√ºre</i></a>.</p>

<p>Shovey&rsquo;s included with goiardi. Schob is the shovey client that gets installed on the nodes that will run jobs, and knife-shove is a knife plugin forked from knife-push to manage shovey jobs. The <a href="https://github.com/ctdk/goiardi/blob/master/README.md#shovey">goiardi shovey docs</a>, the <a href="https://github.com/ctdk/schob/blob/master/README.md">schob README</a>, and the <a href="https://github.com/ctdk/knife-shove/blob/master/README.rdoc">knife-shove README</a> have a bunch of documentation on how to use shovey.</p>

<p>Nice, functional cookbooks for shovey and goiardi are also coming. There is a <a href="https://github.com/ctdk/shovey-jobs">shovey-jobs</a> cookbook already, but it only supports Debian. Other platforms are being added, and will be ready soon.</p>

<p>Also coming reasonably soon are organizations and RBAC (it&rsquo;s finally time), and revamping the documentation. The README has gotten too long and unweildy. It will be split apart, reorganized, and expanded where needed, while the godocs for goiardi will stop being a mirror of the README and focus more on development and internals.</p>

<p>See you at the Summit!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.7.2 - the Yak of Seville]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/08/09/goiardi-version-0-dot-7-2-the-yak-of-seville/"/>
    <updated>2014-08-09T16:01:06-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/08/09/goiardi-version-0-dot-7-2-the-yak-of-seville</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ctdk/goiardi/releases/tag/v0.7.2">Goiardi version 0.7.2</a> is a minor yak shaving release that there isn&rsquo;t a lot to say about. The CHANGELOG pretty much sums it up:</p>

<ul>
<li>Remove a newline in a debug statement, courtesy of <a href="https://github.com/spheromak">@spheromak</a>.</li>
<li>Also per <a href="https://github.com/spheromak">@spheromak</a>&rsquo;s suggestion, fixed some possible race conditions revealed by building goiardi with the <code>-race</code> flag and running chef-pedant against it.</li>
<li>Edit doc.go slightly to make godocs more attractive.</li>
</ul>


<p>Elsewhere, shovey work continues and comes closer to completion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.7.1 - Constant Manatee Attacks]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/07/29/goiardi-version-0-dot-7-1-constant-manatee-attacks/"/>
    <updated>2014-07-29T22:32:13-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/07/29/goiardi-version-0-dot-7-1-constant-manatee-attacks</id>
    <content type="html"><![CDATA[<p>The media refuses to report on this scourge afflicting the Florida coast, which is why you never hear about it.</p>

<p>&ldquo;Shovey&rdquo; is chugging along on a fast pace, but in the meantime a couple of issues came up that I thought deserved attention. Goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.7.1">version 0.7.1</a> is a minor release, addressing two relatively small issues.</p>

<p>First, this release adds options for configuring the db pool size and max number of connections. It was happening automagically before, but I was always a bit uneasy about that. Until last night, though, I kept missing how to set that in the documentation for <code>database/sql</code>.</p>

<p>Second, for cookbook files stored locally (which is currently all of them), goiardi will now set the URL of the resource to use the current configured hostname. This was brought to my attention because someone had uploaded a bunch of cookbooks, changed the hostname and port and turned on SSL, and had the URLs break. It takes a specific chain of events to see the problem, which is why it had gone unnoticed up to this point.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>Add &mdash;db-pool-size and &mdash;max-connections options for configuring the number
of idle db connections kept around and the maximum number of db connections
to make to the server. It isn&rsquo;t particularly useful if you&rsquo;re not using one
of the SQL backends.</li>
<li>For locally stored cookbook files (which is currently all of them), goiardi
now generates the URL to the resource from the currently configured
hostname. This fixes an issue where if you uploaded a cookbook and then
changed the goairdi server&rsquo;s hostname, the URLs to download cookbooks would
break.</li>
</ul>


<p>Other than that, there&rsquo;s nothing else new in this release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.7.0 - Orphans of the Sky]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/07/21/goiardi-version-0-dot-7-0-orphans-of-the-sky/"/>
    <updated>2014-07-21T22:40:32-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/07/21/goiardi-version-0-dot-7-0-orphans-of-the-sky</id>
    <content type="html"><![CDATA[<p>In case you haven&rsquo;t read it, <em><a href="http://en.wikipedia.org/wiki/Orphans_of_the_Sky">Orphans of the Sky</a></em> is a novel by Robert A. Heinlein about a generation ship floating through space where the people on board have forgotten that they are on a space ship. It&rsquo;s pretty good, but more importantly the name of the first of the two novellas that make up the novel is titled &ldquo;Universe&rdquo;. The title of the second part, &ldquo;Common Sense&rdquo;, became relevant after I really dug into making this release for reasons that will soon become clear.</p>

<p>While it ended up being a bigger deal than I expected it to be, I am pleased to announce the release of goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.7.0">version 0.7.0</a>.</p>

<p>I took what I thought would be a brief detour from my current work on the serf integration and &ldquo;shovey&rdquo; stuff for goiardi to implement <a href="https://github.com/opscode/chef-rfc/blob/master/rfc014-universe-endpoint.md">Chef RFC 014</a> real quick like, which I had been considering doing even before the RFC came along. I had been planning on making this a small release numbered 0.6.1, but then after I proposed a mechanism for caching the universe endpoint it was suggested in the RFC discussion that I see how goiardi performed with the full load of cookbooks in the supermarket before jumping the gun and adding caching before it was necessarily needed.</p>

<p>It turned out that will over 6,000 cookbooks the universe endpoint ran like a dog. Ultimately the problem boiled down to using gob to encode the complex data structures in cookbooks, nodes, etc. in the database. Generally gob encoding in golang is faster than using JSON, but in this particular case JSON is actually faster. The &ldquo;common sense&rdquo; thing to do was to change how those complex structures are stored in the database, even though it&rsquo;s a bit of a brutal change. Sometimes, though, you have to bite the bullet and do the thing that sucks. It&rsquo;s ended up working nicely, however; the postgres implementation is now able to make use of the json type and the json functions built into Postgres. Before switching from gob to json, serving <code>/universe</code> with over 6200 cookbooks took over 3 seconds with Postgres or MySQL, but afterwards Postgres can serve it in roughly 325 milliseconds. MySQL isn&rsquo;t able to take advantage of the Postgres-specific json functionality, but it still went down to 1 second, so that&rsquo;s a marked improvement. Using the in-memory (with or without file backing) takes about 1.2 seconds. I&rsquo;m willing to take this; if you have that many cookbooks and can&rsquo;t wait a second for <code>/universe</code>, you may want to use Postgres for your data store.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>Add /universe API endpoint, per
<a href="https://github.com/opscode/chef-rfc/blob/master/rfc014-universe-endpoint.md.">https://github.com/opscode/chef-rfc/blob/master/rfc014-universe-endpoint.md.</a></li>
<li>Make file uploading a little more forgiving.</li>
<li>Make validating some cookbook metadata more forgiving, to bring goiardi&rsquo;s
validations in line with erchef.</li>
<li>Added some functions to make listing all cookbooks and recipes on the
server faster and move the logic into the cookbook package.</li>
<li><p>Breaking DB change: with both MySQL and Postgres, the way data structures
for cookbooks, nodes, etc. has changed from gob encoding to using JSON. This
obviously breaks existing items in the database, so the following steps must
be followed by users using either SQL backend for data storage:</p>

<ul>
<li>Export their goiardi server&rsquo;s data with the <code>-x</code> flag.</li>
<li>Either revert all changes to the db with sqitch, then redeploy, or drop
the database manually and recreate it from either the sqitch patches or
the full table dump of the release (provided starting with 0.7.0)</li>
<li>Reload the goiardi data with the <code>-m</code> flag.
See the README or the godocs for more information.</li>
</ul>
</li>
</ul>


<p>More documentation on the universe endpoint in goiardi is <a href="https://github.com/ctdk/goiardi#berks-universe-endpoint">available in the README</a>. Specific information on upgrading is also in the README in the <a href="https://github.com/ctdk/goiardi#upgrading">UPGRADING</a> section.</p>

<p>Back to the serf/shovey stuff, then.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.6.0 - Order of the Elephant]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/07/01/goiardi-version-0-dot-6-0-order-of-the-elephant/"/>
    <updated>2014-07-01T21:36:11-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/07/01/goiardi-version-0-dot-6-0-order-of-the-elephant</id>
    <content type="html"><![CDATA[<div style="margin-left: auto; margin-right: auto; width: 40%;"><img src="http://ctdk.github.io/goiardi/images/Order_of_the_Elephant_12.jpg" /></div>


<p>The <a href="http://en.wikipedia.org/wiki/Order_of_the_Elephant">Order of the Elephant</a> is a Danish order awarded mostly to foreign heads of state and royals. Its elephant-themed insignia is appropriate for this latest release of goiardi, <a href="https://github.com/ctdk/goiardi/releases/tag/v0.6.0">version 0.6.0</a>.</p>

<p>Along with some bug fixes and smaller improvements, this release introduces Postgres as a supported database backend. The schema is not compatible with erchef&rsquo;s schema, but is close to the goiardi MySQL schema (with some differences of course). This is the first project I&rsquo;ve done with Postgres, so comments on how goiardi is using it are welcome.</p>

<p>Full CHANGELOG:</p>

<ul>
<li>Postgres support.</li>
<li>Fix rebuilding indexes with an SQL backend.</li>
<li>Fix a bug where in MySQL mode events were being logged twice.</li>
<li>Fix an annoying chef-pedant error with data bags.</li>
<li>Event logging methods that are not allowed now return Method Not Allowed
rather than Bad Request.</li>
<li>Switch the logger to a fork that can be built and used with Windows that
excludes syslog when building on Windows.</li>
<li>Add basic syslog support.</li>
<li>Authentication protocol version 1.2 now supported.</li>
<li>Add a &lsquo;status&rsquo; param to reporting, so a list of reports return by &lsquo;knife
runs&rsquo; can be narrowed by the status of the chef run (started, success, and
failure).</li>
<li>Fix an action at a distance problem with in-memory mode objects. If this
behavior is still desirable (it seems to be slightly faster than the new way),
it can be turned back on with the &mdash;use-unsafe-mem-store flag. This change
DEFINITELY breaks in-mem data file compatibility. If upgrading, export your
data, upgrade goiardi, and reload your data.</li>
<li>Add several new searchable parameters for logged events.</li>
<li>Add organization_id to all MySQL tables that might need it someday. Orgs are
not used at all, so only the default value of 1 currently makes it to the
database.</li>
<li>Finally ran &lsquo;go fmt&rsquo; on goiardi. It didn&rsquo;t even mess up the long comment
blocks, which was what I was afraid it would do. I also ran golint against
goiardi and took its recommendations where it made sense, which was most
areas except for some involving generated parser code, comments on
GobEncode/Decode, commenting a bunch of identical functions on an interface
in search, and a couple of cases involving make and slices. All in all,
though, the reformatting, linting, and light refactoring has done it good.</li>
</ul>


<p>To reiterate, this update breaks saved data file compatibility. You&rsquo;ll need to export and re-import your data if you&rsquo;re using the persistent in-memory data store.</p>

<p>A selection of precompiled binaries are provided on the release page, including Windows and Solaris builds. There are also knife plugins for goiardi&rsquo;s reporting and event logging capabilities at <a href="https://github.com/ctdk/knife-goiardi-reporting">knife-goiardi-reporting</a> and <a href="https://github.com/ctdk/knife-goiardi-event-log">knife-goiardi-event-log</a>. The reporting plugin was forked from the official Chef knife-reporting plugin to add support for the &ldquo;status&rdquo; parameter. Both plugins are also available on rubygems.</p>

<p>Finally, after someone asked how goiardi would handle running ~500 nodes, I decided to take a look and see. I <a href="https://gist.github.com/ctdk/a2d40f03ddfc616e0d42">whipped up a little test script</a> to create a thousand nodes and clients to see how goiardi (and more importantly the search) would handle it. I wasn&rsquo;t particularly worried about the non-search portions of goiardi (1000 rows on a table isn&rsquo;t very much at all, after all), but I hadn&rsquo;t tested search extensively with large amounts of data. After creating those 1,000 nodes and clients, goiardi was using about 1.40 GB of RAM. An earlier test with 5,500 nodes (but no clients) used 6.45GB RAM. The numbers show that there&rsquo;s definitely room for improvement with the search, in that the capability for indexing nodes and data bags is limited by RAM, but performance was good even at 5,500 nodes. More rigorous testing is needed, however. Search is an area I intend to revisit shortly to improve these problems.</p>

<p>The next issues to work on with goiardi are currently improving search to work even better with large amounts of data and use raft (or something similar) to allow multiple goiardi instances to keep their search indexes consistent, reworking the permissions system, being able to upload files to s3 or similar storage providers, and the serf based pushy type thing.</p>
]]></content>
  </entry>
  
</feed>

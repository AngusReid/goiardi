<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Releases | Goiardi]]></title>
  <link href="http://ctdk.github.io/goiardi/blog/categories/releases/atom.xml" rel="self"/>
  <link href="http://ctdk.github.io/goiardi/"/>
  <updated>2014-07-08T00:33:13-07:00</updated>
  <id>http://ctdk.github.io/goiardi/</id>
  <author>
    <name><![CDATA[Jeremy Bingham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.6.0 - Order of the Elephant]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/07/01/goiardi-version-0-dot-6-0-order-of-the-elephant/"/>
    <updated>2014-07-01T21:36:11-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/07/01/goiardi-version-0-dot-6-0-order-of-the-elephant</id>
    <content type="html"><![CDATA[<div style="margin-left: auto; margin-right: auto; width: 40%;"><img src="http://ctdk.github.io/goiardi/images/Order_of_the_Elephant_12.jpg" /></div>


<p>The <a href="http://en.wikipedia.org/wiki/Order_of_the_Elephant">Order of the Elephant</a> is a Danish order awarded mostly to foreign heads of state and royals. Its elephant-themed insignia is appropriate for this latest release of goiardi, <a href="https://github.com/ctdk/goiardi/releases/tag/v0.6.0">version 0.6.0</a>.</p>

<p>Along with some bug fixes and smaller improvements, this release introduces Postgres as a supported database backend. The schema is not compatible with erchef&rsquo;s schema, but is close to the goiardi MySQL schema (with some differences of course). This is the first project I&rsquo;ve done with Postgres, so comments on how goiardi is using it are welcome.</p>

<p>Full CHANGELOG:</p>

<ul>
<li>Postgres support.</li>
<li>Fix rebuilding indexes with an SQL backend.</li>
<li>Fix a bug where in MySQL mode events were being logged twice.</li>
<li>Fix an annoying chef-pedant error with data bags.</li>
<li>Event logging methods that are not allowed now return Method Not Allowed
rather than Bad Request.</li>
<li>Switch the logger to a fork that can be built and used with Windows that
excludes syslog when building on Windows.</li>
<li>Add basic syslog support.</li>
<li>Authentication protocol version 1.2 now supported.</li>
<li>Add a &lsquo;status&rsquo; param to reporting, so a list of reports return by &lsquo;knife
runs&rsquo; can be narrowed by the status of the chef run (started, success, and
failure).</li>
<li>Fix an action at a distance problem with in-memory mode objects. If this
behavior is still desirable (it seems to be slightly faster than the new way),
it can be turned back on with the &mdash;use-unsafe-mem-store flag. This change
DEFINITELY breaks in-mem data file compatibility. If upgrading, export your
data, upgrade goiardi, and reload your data.</li>
<li>Add several new searchable parameters for logged events.</li>
<li>Add organization_id to all MySQL tables that might need it someday. Orgs are
not used at all, so only the default value of 1 currently makes it to the
database.</li>
<li>Finally ran &lsquo;go fmt&rsquo; on goiardi. It didn&rsquo;t even mess up the long comment
blocks, which was what I was afraid it would do. I also ran golint against
goiardi and took its recommendations where it made sense, which was most
areas except for some involving generated parser code, comments on
GobEncode/Decode, commenting a bunch of identical functions on an interface
in search, and a couple of cases involving make and slices. All in all,
though, the reformatting, linting, and light refactoring has done it good.</li>
</ul>


<p>To reiterate, this update breaks saved data file compatibility. You&rsquo;ll need to export and re-import your data if you&rsquo;re using the persistent in-memory data store.</p>

<p>A selection of precompiled binaries are provided on the release page, including Windows and Solaris builds. There are also knife plugins for goiardi&rsquo;s reporting and event logging capabilities at <a href="https://github.com/ctdk/knife-goiardi-reporting">knife-goiardi-reporting</a> and <a href="https://github.com/ctdk/knife-goiardi-event-log">knife-goiardi-event-log</a>. The reporting plugin was forked from the official Chef knife-reporting plugin to add support for the &ldquo;status&rdquo; parameter. Both plugins are also available on rubygems.</p>

<p>Finally, after someone asked how goiardi would handle running ~500 nodes, I decided to take a look and see. I <a href="https://gist.github.com/ctdk/a2d40f03ddfc616e0d42">whipped up a little test script</a> to create a thousand nodes and clients to see how goiardi (and more importantly the search) would handle it. I wasn&rsquo;t particularly worried about the non-search portions of goiardi (1000 rows on a table isn&rsquo;t very much at all, after all), but I hadn&rsquo;t tested search extensively with large amounts of data. After creating those 1,000 nodes and clients, goiardi was using about 1.40 GB of RAM. An earlier test with 5,500 nodes (but no clients) used 6.45GB RAM. The numbers show that there&rsquo;s definitely room for improvement with the search, in that the capability for indexing nodes and data bags is limited by RAM, but performance was good even at 5,500 nodes. More rigorous testing is needed, however. Search is an area I intend to revisit shortly to improve these problems.</p>

<p>The next issues to work on with goiardi are currently improving search to work even better with large amounts of data and use raft (or something similar) to allow multiple goiardi instances to keep their search indexes consistent, reworking the permissions system, being able to upload files to s3 or similar storage providers, and the serf based pushy type thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.5.2 - Block of Dirt]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/06/19/goiardi-version-0-dot-5-2-block-of-dirt/"/>
    <updated>2014-06-19T12:36:31-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/06/19/goiardi-version-0-dot-5-2-block-of-dirt</id>
    <content type="html"><![CDATA[<p>Between the previous goiardi release and this one, my kids discovered Minecraft. This means that <em>I</em> started playing Minecraft, which ended up slowing goiardi development down for a while.</p>

<p>This blocky adversary has been overcome, however, and goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.5.2">version 0.5.2</a> is out.</p>

<p>Originally the next goiardi release was going to add Postgres support. This was about halfway done, and will be resumed shortly, but I decided that it was more important to add the ability to import and export data before any of the goiardi structs changed.</p>

<p>Changes in this release, from the CHANGELOG:</p>

<ul>
<li>Add import/export of goiardi data through a JSON dump.</li>
<li>Add configuration options to specify the max sizes for objects uploaded to the filestore and for JSON requests from the client.</li>
</ul>


<p>Importing and exporting is explained <a href="https://github.com/ctdk/goiardi#import-and-export-of-data">in the README</a> and in <a href="http://godoc.org/github.com/ctdk/goiardi#hdr-Import_and_Export_of_Data">the godocs</a>. Basically you add the <code>-x/--export</code> flag to your usual goiardi command to export the data to a JSON file, and run the <code>-m/--import</code> flags with your new desired goiardi set of flags to import the data. The administrator is responsible for removing any existing data (on-disk or SQL) and index files. This can help with backups or moving between the different storage engines goiardi supports, keeping data between upgrades, and should make testing easier in the future.</p>

<p>Also, per the README, there are new options to specify the maximum size of an object that can be uploaded to the filestore, and the maximum size of a JSON request from a client. The <code>-Q/--obj-max-size</code> flag gets the filestore object max size, while <code>-j/--json-req-max-size</code> sets the JSON request max size limit.</p>

<p>Completely unrelated to any of my efforts, but while I was preparing this release <a href="http://blog.golang.org/go1.3">Go 1.3 was released</a>. Goiardi and its dependencies build just fine with Go 1.3 with no changes. This also means that goiardi should be able run on some of the stranger platforms out there, like Solaris, the illumos based distributions, plan9, and apparently Dragonfly BSD. So far goiardi has only been build on OmniOS r151008j, but it built fine.</p>

<p>Finally, as an added convenience: on <a href="https://github.com/ctdk/goiardi/releases/tag/v0.5.2">the goiardi 0.5.2 release page</a>, precompiled binaries are being provided for download, if you don&rsquo;t feel like setting up go and compiling them yourself. As of this writing binaries are provided for Linux (built on Debian wheezy), MacOS X (built on 10.9 Mavericks), FreeBSD (built on FreeBSD 9.2), and illumos (built on OmniOS r151008j). The Linux, MacOS X, and FreeBSD binaries are x86_64, the illumos binary <strike>i386</strike> <strong>update:</strong> I misinterpreted the output of <code>psrinfo</code> &ndash; it was compiled for 64 bit. It appears that there&rsquo;s no reason that goiardi can&rsquo;t easily be cross compiled though, so a more sensible set of precompiled binaries will be coming soon. If you don&rsquo;t see binaries for your platform, try grabbing a binary that&rsquo;s built on a similar platform to yours, or compile it yourself.</p>

<p>Coming down the pipeline is resuming and re-merging the Postgres work, making some data structures safer for in-memory mode, some extra features for event logging and reporting, improving tests and moving away from depending on chef-pedant, and an idea I&rsquo;ve been kicking around for a serf-based pushy type thing. For those curious about the Postgres goiardi schema, you can see it <a href="https://github.com/ctdk/goiardi-schema/tree/postgres">in the &lsquo;postgres&rsquo; tree in goiardi-schema</a>. It&rsquo;s firmed up, but still subject to change before getting merged back in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.5.1 - Rodan Overhead]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/05/26/goiardi-version-0-dot-5-1-rodan-overhead/"/>
    <updated>2014-05-26T11:04:04-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/05/26/goiardi-version-0-dot-5-1-rodan-overhead</id>
    <content type="html"><![CDATA[<p>The sky darkens. Blotting out the sun, Rodan appears to destroy beloved landmarks and stomp on small models of tanks. Goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.5.1">version 0.5.1</a> has been released.</p>

<p>This is an incremental release, made up of bug fixes and relatively minor new features. The most interesting new features are <a href="https://github.com/ctdk/goiardi/tree/cc9aeb1766be7515458dcc6ad6e5260201b0e837#event-logging">event logging</a> and <a href="https://github.com/ctdk/goiardi/tree/cc9aeb1766be7515458dcc6ad6e5260201b0e837#reporting">reporting</a>, although the log level changes are also nice.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>Add log levels (from debug to critical). This makes -V/&mdash;verbose useful.</li>
<li>Add an easier option in the config file to specify log levels by name.</li>
<li>ipv6 already worked, but accidentally. Now it works in a more deliberate
fashion, preventing mishaps with addresses, colons, and port numbers.</li>
<li>Authentication protocol version 1.1 now supported.</li>
<li>Remove a sort on run lists that was there for some reason. I have no idea
what it was put there for, but it was wrong.</li>
<li>Add an event log to log changes to objects like nodes, clients, etc. See the
README or godocs for details.</li>
<li>Add support for reporting (<a href="http://docs.opscode.com/reporting.html"><a href="http://docs.opscode.com/reporting.html">http://docs.opscode.com/reporting.html</a></a>)</li>
</ul>


<p>This release should not break old save files, if you&rsquo;re using that. If you&rsquo;re using MySQL, you&rsquo;ll need to deploy the sqitch changes.</p>

<p>The next big things to start working on are the long promised Postgres support, and etcd/serf/consul etc. integration. Groupcache has also been asked for and looks like a worthwhile thing to pick up. As always, the <a href="https://github.com/ctdk/goiardi/issues?state=open">issues page</a> is a good place to look at what&rsquo;s being worked on.</p>

<p>Goiardi is also starting to grow beyond using chef-pedant for most of its testing; it&rsquo;s about time to start more native golang tests for goiardi and not use chef-pedant for the main tests. It should always work with chef-pedant, of course, but goiardi&rsquo;s starting to get more features that chef-pedant doesn&rsquo;t check.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.5.0 - Stürmisch Bewegt - Now With MySQL]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/05/02/goiardi-version-0-dot-5-0-sturmisch-bewegt-now-with-mysql/"/>
    <updated>2014-05-02T10:10:55-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/05/02/goiardi-version-0-dot-5-0-sturmisch-bewegt-now-with-mysql</id>
    <content type="html"><![CDATA[<p>Stormily agitated, a new goiardi release appears! Goiardi <a href="https://github.com/ctdk/goiardi/releases/tag/v0.5.0">version 0.5.0</a> has been released.</p>

<p>Aside from a few bug fixes, this release brings MySQL support. Now, in addition to running entirely in memory, goiardi can use MySQL for storing data. The <a href="https://github.com/ctdk/goiardi/blob/master/README.md">README</a> and <a href="http://godoc.org/github.com/ctdk/goiardi">godocs</a> explain how to set that up.</p>

<p>From the CHANGELOG:</p>

<ul>
<li>MySQL support added</li>
<li>No longer redirect /environments/NAME/roles/NAME to /roles/NAME/environments/NAME</li>
<li>Update documentation, reformat godocs</li>
<li>Split actors apart into separate user and client types, made new Actor interface that encompasses both users and clients.</li>
</ul>


<p><strong>Note:</strong> This release contains one breaking change. Saved data files from previous goiardi releases will not work with 0.5.0, so if you&rsquo;re in that situation either don&rsquo;t upgrade or remove your saved index and data files before starting up. This will regenerate your admin, validator, and webui keys, and of course nuke anything you had in place before.</p>

<p>Postgres support has already been requested by a few people, so that should be coming fairly soon. The <a href="https://github.com/ctdk/goiardi/issues?state=open">issues page</a> has been filled in with some enhancements that would be nice for goiardi to have. Feel free to add your own if there&rsquo;s something you&rsquo;d like to see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goiardi Version 0.4.2 - This Is Spinal Tap]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/03/19/goiardi-version-0-dot-4-2-this-is-spinal-tap/"/>
    <updated>2014-03-19T23:04:46-07:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/03/19/goiardi-version-0-dot-4-2-this-is-spinal-tap</id>
    <content type="html"><![CDATA[<p>It seems like only yesterday that there was a goiardi release, but really it was a few days ago. <a href="https://github.com/ctdk/goiardi/releases/tag/v0.4.2">Goiardi version 0.4.2</a> is hot off the presses and ready for your perusal.</p>

<p>This is a bugfix release. The reason this is the &ldquo;Spinal Tap&rdquo; release was because I noticed these problems while I took the day off after getting a spinal tap and was bored, so it seemed fitting. The bug fixes, from the CHANGELOG, are:</p>

<ul>
<li>Perm tweak for nodes updating themselves.</li>
<li>Small change with validating role descriptions when creating or updating from JSON.</li>
<li>Fix issue with saving complicated indexed objects to disk where improperly flattened indexable objects were making the gob encoder puke all over itself when encoding the tries in the index docs.</li>
<li>Fixed a possible regression with synchronizing cookbooks that did not show up in testing, but only in real use.</li>
<li>An absolutely bonkers fix for listing cookbook files with webui. Webui wants all of the cookbook top level attributes sent over with a request to /cookbooks/&lt;name&gt;/&lt;version&gt;, but this is the exact <em>opposite</em> of the behavior chef-pedant wants, where empty definitions, attributes, etc. are not sent over. Knife also seems quite content with this, so the fix for now, since the two cases are mutually exclusionary, is to only send the empty hashes for those top level attributes with a GET if the request is coming from the webui. Bizarre, but it seems to be what&rsquo;s necessary.</li>
</ul>


<p>These were all problems that evaded notice during testing, but did pop up when I was using goiardi to set up a vagrant VM to start working on letting goiardi run a real database (optionally, of course) instead of the in-memory data store system it&rsquo;s using now. The in-memory mode is great and all for testing, and being able to freeze the data to disk for persistence is very handy, but being able to use a real database would be nice for some workloads. Supporting both the current in-memory storage and a database backend is a top priority.</p>

<p>Which database to use is still a bit up in the air, but I&rsquo;m leaning towards throwing caution to the wind and providing support for both MySQL and Postgres, with SQLite as a distinct possibility down the line. MySQL is likely to come first, but that is not set in stone.</p>
]]></content>
  </entry>
  
</feed>

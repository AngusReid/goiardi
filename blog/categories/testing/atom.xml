<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Goiardi]]></title>
  <link href="http://ctdk.github.io/goiardi/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://ctdk.github.io/goiardi/"/>
  <updated>2014-03-15T00:52:30-07:00</updated>
  <id>http://ctdk.github.io/goiardi/</id>
  <author>
    <name><![CDATA[Jeremy Bingham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go Test Coverage Progressing]]></title>
    <link href="http://ctdk.github.io/goiardi/blog/2014/02/13/go-test-coverage-progressing/"/>
    <updated>2014-02-13T09:28:49-08:00</updated>
    <id>http://ctdk.github.io/goiardi/blog/2014/02/13/go-test-coverage-progressing</id>
    <content type="html"><![CDATA[<p>It&rsquo;s in progress, but goiardi&rsquo;s getting actual golang test coverage. It&rsquo;s being built out in the <a href="https://github.com/ctdk/goiardi/tree/test_writing">test_writing</a> branch, and so far has coverage with the crypto, data store, indexer, and utility libraries inside goiardi. Already the data store and indexer save and load functions have been reworked to make testing easier, and more tests will be coming soon.</p>

<p>Previously goiardi testing was done with chef-pedant, and that will continue to be the primary means of testing goiardi. However, there are areas where actual go tests will be useful, particularly with things like the data store and indexer that don&rsquo;t get quite as exercised by chef-pedant. My current thinking is that the go tests should focus more on internals, while chef-pedant coverage is important for testing its public behavior.</p>
]]></content>
  </entry>
  
</feed>
